{"ast":null,"code":"const initialState = {\n  totalCost: 0,\n  totalProducts: 0,\n  items: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_TO_CART\":\n      {\n        return state.items.find(item => item.code === action.product.code) ? {\n          totalProducts: state.totalProducts + 1,\n          totalCost: state.totalCost + action.product.cost,\n          items: state.items.map(item => {\n            if (item.code === action.product.code) {\n              return {\n                ...item,\n                quantity: item.quantity + 1\n              };\n            }\n            return item;\n          })\n        } : {\n          totalProducts: state.totalProducts + 1,\n          totalCost: state.totalCost + action.product.cost,\n          items: [...state.items, {\n            ...action.product,\n            quantity: 1\n          }]\n        };\n      }\n    case \"SET_QUANTITY\":\n      {\n        // Set updated quantity\n        let reviseQuantity = state.items.map(item => {\n          if (item.code === action.code) {\n            return {\n              ...item,\n              quantity: action.quantity\n            };\n          }\n          return item;\n        });\n\n        // Recompute total quantity\n        let reviseTotalQuantity = reviseQuantity.reduce((prev, curr) => {\n          return prev + curr.quantity;\n        }, 0);\n\n        // Recompute total cost\n        let reviseTotalCost = reviseQuantity.reduce((prev, curr) => {\n          return prev + curr.quantity * curr.cost;\n        }, 0);\n        return {\n          totalProducts: reviseTotalQuantity,\n          totalCost: reviseTotalCost,\n          items: reviseQuantity\n        };\n      }\n    case \"REMOVE_ITEM\":\n      {\n        let findItem = state.items.find(item => item.code === action.code);\n        if (findItem) {\n          let totalCostOfItem = findItem.quantity * findItem.cost;\n          return {\n            totalProducts: state.totalProducts - findItem.quantity,\n            totalCost: state.totalCost - totalCostOfItem,\n            items: state.items.filter(item => item.code !== action.code)\n          };\n        } else {\n          return state;\n        }\n      }\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"names":["initialState","totalCost","totalProducts","items","state","action","type","find","item","code","product","cost","map","quantity","reviseQuantity","reviseTotalQuantity","reduce","prev","curr","reviseTotalCost","findItem","totalCostOfItem","filter"],"sources":["C:/start/src/store/reducers/cartReducer.js"],"sourcesContent":["const initialState = {\n  totalCost: 0,\n  totalProducts: 0,\n  items: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_TO_CART\": {\n      return state.items.find(item => item.code === action.product.code)\n        ? {\n            totalProducts: state.totalProducts + 1,\n            totalCost: state.totalCost + action.product.cost,\n            items: state.items.map(item => {\n              if (item.code === action.product.code) {\n                return {\n                  ...item,\n                  quantity: item.quantity + 1\n                };\n              }\n\n              return item;\n            })\n          }\n        : {\n            totalProducts: state.totalProducts + 1,\n            totalCost: state.totalCost + action.product.cost,\n            items: [...state.items, { ...action.product, quantity: 1 }]\n          };\n    }\n    case \"SET_QUANTITY\": {\n      // Set updated quantity\n      let reviseQuantity = state.items.map(item => {\n        if (item.code === action.code) {\n          return {\n            ...item,\n            quantity: action.quantity\n          };\n        }\n        return item;\n      });\n\n      // Recompute total quantity\n      let reviseTotalQuantity = reviseQuantity.reduce((prev, curr) => {\n        return prev + curr.quantity;\n      }, 0);\n\n      // Recompute total cost\n      let reviseTotalCost = reviseQuantity.reduce((prev, curr) => {\n        return prev + curr.quantity * curr.cost;\n      }, 0);\n\n      return {\n        totalProducts: reviseTotalQuantity,\n        totalCost: reviseTotalCost,\n        items: reviseQuantity\n      };\n    }\n    case \"REMOVE_ITEM\": {\n      let findItem = state.items.find(item => item.code === action.code);\n\n      if (findItem) {\n        let totalCostOfItem = findItem.quantity * findItem.cost;\n        return {\n          totalProducts: state.totalProducts - findItem.quantity,\n          totalCost: state.totalCost - totalCostOfItem,\n          items: state.items.filter(item => item.code !== action.code)\n        };\n      } else {\n        return state;\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}